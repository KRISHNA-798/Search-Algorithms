//This is binary search algotithm
Here we consider an int[](For newbies this is called an integer array) and a key element is taken and we have to search the key is present or not if yes then the position if it 
in the array . But here we dont use brute force (i.e search through the whole array from start to end for the key) but instead we sort the array either in ascending or descending 
order , then we repeat the following steps : (consider initially two pointers start([0]) and end ([n-1]) in array)
i) take a pointer and set its value to mid of array(changes for every iteration).
ii) if key equals mid then element found else check if the key is < or > the mid value
iii) if the value is > the mid pointer then we consider the array from mid to the end and repeat steps i , ii.
iv) if the value is < the mid pointer then consider the array from start to mid and repeat the steps i , ii.
so here we basically sort the array so that instead of traversing the whoel array we can just traverse half the array based on the key value and mid value.

CODE: 
A) Here the array is given sorted.( I do this for more practice :) )

import java.util.*;
public class binarysearch
{
	static int search(int arr[] , int key, int start, int end)
	{
		while(start <= end)
		{
		int mid = end + (start - end)/2 ;
		if(arr[mid] == key)
			return mid;
		else if(key < arr[mid])
			return search(arr , key , start , mid-1);
		else if(key > arr[mid])
			return search(arr , key , mid+1 , end);
		}
		return -1;
	}
	public static void main(String args[])
	{
		Scanner s = new Scanner(System.in);
		System.out.println("Enter the length of array :");
		int len = s.nextInt();
		int arr[] = new int[len];
		System.out.println("Enter the srray elements :");
		for(int i = 0; i < len; i++)
		{
			arr[i] = s.nextInt();
		}
		System.out.println("Enter the key element ");
		int key = s.nextInt();
		int start = 0;
		int end = len - 1;
		int res = search(arr,key,start,end);
		System.out.println("The position of key in array is :" + res);
	}
}

B) Here the array need's to be sorted and then search is applied.

import java.util.*;
public class binarysearch
{
	static void sort(int arr[] , int len)
	{
		for(int i = 0; i < len; i++)
		{
			for(int j = i+1; j < len; j++)
			{
				int temp = 0;
				if(arr[i] > arr[j])
				{
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
	}
	static int search(int arr[] , int key, int start, int end)
	{
		while(start <= end)
		{
		int mid = end + (start - end)/2 ;
		if(arr[mid] == key)
			return mid;
		else if(key < arr[mid])
			return search(arr , key , start , mid-1);
		else if(key > arr[mid])
			return search(arr , key , mid+1 , end);
		}
		return -1;
	}
	public static void main(String args[])
	{
		Scanner s = new Scanner(System.in);
		System.out.println("Enter the length of array :");
		int len = s.nextInt();
		int arr[] = new int[len];
		System.out.println("Enter the srray elements :");
		for(int i = 0; i < len; i++)
		{
			arr[i] = s.nextInt();
		}
		System.out.println("Enter the key element ");
		int key = s.nextInt();
		int start = 0;
		int end = len - 1;
		sort(arr,len);
		int res = search(arr,key,start,end);
		System.out.println("The position of key in array is :" + res);
	}
}
